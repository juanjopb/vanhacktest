- name: create VPC for Ansible
  ec2_vpc_net:
    name: VPC
    state: present
    cidr_block: 172.32.0.0/16
    region: "{{ aws_region }}"
    tags:
      Name: VPC_IGW
      Owner: jjpb    
  register: VPC
    
- name: display VPC results
  debug: 
    var: VPC

- name: create internet gateway for VPC
  ec2_vpc_igw:
    state: present
    region: "{{ aws_region }}"
    vpc_id: "{{ VPC.vpc.id }}"
    tags:
      Name: VPC_IGW
      Owner: jjpb 
  register: VPC_igw
- name: display VPC IGW details
  debug: 
    var: VPC_igw

- name: obtain all AZ present in region {{ aws_region }}
  aws_az_facts:
    region: "{{ aws_region }}"
  register: az_in_region

- name: display all AZ present in region {{ aws_region }}
  debug: 
    var: az_in_region

#create public subnet in first az and private subnet in second az
- name: display AZ that will be used for public and private Subnets
  debug:
    msg:
      - "public subnet in AZ: {{ az_in_region.availability_zones[0].zone_name }}"
      - "private subnet in AZ: {{ az_in_region.availability_zones[1].zone_name }}"

- name: create public subnet in AZ {{ az_in_region.availability_zones[0].zone_name }}
  ec2_vpc_subnet:
    state: present
    cidr: 172.32.1.0/24
    az: "{{ az_in_region.availability_zones[0].zone_name }}"
    vpc_id: "{{ VPC.vpc.id }}"
    region: "{{ aws_region }}"
    map_public: yes
    tags:
      Name: public subnet
      Owner: jjpb
  register: public_subnet

- name: show public subnet details
  debug: 
    var: public_subnet

- name: create private subnet in AZ {{ az_in_region.availability_zones[1].zone_name }}
  ec2_vpc_subnet:
    state: present
    cidr: 172.32.2.0/24
    az: "{{ az_in_region.availability_zones[1].zone_name }}"
    vpc_id: "{{ VPC.vpc.id }}"
    region: "{{ aws_region }}"
    resource_tags:
      Name: private subnet
      Owner: jjpb
  register: private_subnet

- name: show private subnet details
  debug:  
    var: private_subnet

- name: create new route table for public subnet
  ec2_vpc_route_table:
    state: present
    region: "{{ aws_region }}"
    vpc_id: "{{ VPC.vpc.id }}"
    tags:
      Name: rt_VPC_PublicSubnet
      Owner: jjpb
    subnets:
      - "{{ public_subnet.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ VPC_igw.gateway_id }}"
  register: rt_VPC_PublicSubnet
  
- name: display public route table
  debug: 
    var: rt_VPC_PublicSubnet

- name: Security Group of EC2 Instance
  ec2_group:
    state: present
    name: sg_VPC_publicsubnet
    description: security group to access the server.
    vpc_id: "{{ VPC.vpc.id }}"
    region: "{{ aws_region }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
        rule_desc: allow ssh to server
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
        rule_desc: allow Webserver expose
    tags:
      Owner: jjpb
  register: sg_VPC_publicsubnet

- name: display details for security group
  debug: 
    var: sg_VPC_publicsubnet 

- name: Create an EC2 key
  ec2_key:
    name: "{{ my_useast1_key }}"
    region: "{{ aws_region }}"
  register: ec2_keypair

- name: display details of the Key
  debug: 
    var: ec2_keypair

- name: Save private key
  copy: 
    content: "{{ ec2_keypair.key.private_key }}" 
    dest: "../aws-private.pem" 
    mode: 0600
  when: ec2_keypair.changed

- name: create instance using Ansible
  ec2:
    key_name: "{{ my_useast1_key }}"
    group: sg_VPC_publicsubnet
    vpc_subnet_id: "{{ public_subnet.subnet.id }}"
    instance_type: "{{ instance_type }}"
    ec2_region: "{{ aws_region }}"
    exact_count: "{{ ec2_count_instances }}"
    count_tag: 
      Name: Webserver-jjpb
      Owner: jjpb
    image: "{{ base_image }}"
    assign_public_ip: yes
    wait: yes
    instance_tags:
      Name: Webserver-jjpb
      Owner: jjpb
  register: ec2_web

- name: display details for EC2 Instance
  debug: 
    var: ec2_web 

- name: Add the newly created EC2 instance(s) to host group
  lineinfile: 
    dest: "{{ hostpath }}"
    regexp: "{{ item.public_ip }}" 
    insertafter: "[webserver]" 
    line: "{{ item.public_ip }} {{hoststring}}"
    state: present
  with_items: '{{ ec2_web.instances }}'

- wait_for:
    path: "{{ hostpath }}" 
    search_regex: "{{hoststring}}"

- name: create RDS instance
  rds:
    command: create
    region: "{{ aws_region }}"
    instance_name: "{{ rds_instance_name }}"
    db_engine: MySQL
    size: 20 # determines the storage size in GB
    instance_type: db.t2.micro
    username: "{{ rds_username }}"
    password: "{{ rds_password }}"
    tags:
      Environment: db_jjpb
      Application: test
  register: db_rds

#- name: display details for RDS Instance
#  debug: 
#    var: db_rds

- name: display details for RDS Instance endpoint
  debug: 
    var: db_rds.instance.endpoint

- name: Add the newly created RDS instance(s) to Var File
  lineinfile: 
    dest: "{{ varpath }}"
    regexp: "^rds_endpoint:" 
    #insertafter: "rds_endpoint:" 
    line: "rds_endpoint: {{ item }}"
    state: present
  with_items: '{{ db_rds.instance.endpoint }}'

  #- name: Add the newly created RDS instance(s) to host group
#  lineinfile: dest={{ hostpath }}
#            regexp={{ item }} 
#            insertafter="[dbinstance]" 
#            line="{{ item }}"
#            state=present
#  with_items: '{{ db_rds.instance.endpoint }}'

#  - name:  Create MySQL database
#    mysql_db:
#      login_host:      "{{ db_rds.instance.endpoint}}"
#      login_user:      "{{ rds_username }}"
#      login_password:  "{{ rds_password }}"
#      name:            "{{ rds_db_name }}"
#      state:           present
